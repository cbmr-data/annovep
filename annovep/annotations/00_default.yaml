#
# Default AnnoVEP annotations
#
# Note that while most annotations are defined purely in terms of this YAML file, a
# couple of do rely on post processing in postprocess.py to produce the final output.
#
# Runtimes with annoations are estimated by running AnnoVEP and comparing the runtime
# without any custom annotations with the runtime when just that annotation is enabled.
#

# Annotations built into AnnoVEP
BasicAnnotations:
  Rank: 0
  Type: Basic
  Enabled: mandatory
  Fields:
    - Input: "Chr"
      Help: "Chromosome/Contig recorded in input VCF"
      Source: input
    - Input: "Pos"
      Help: "Position recorded in input VCF"
      Source: input
      FieldType: int
      ThousandsSep: yes
    - Input: "ID"
      Help: "ID recorded in input VCF"
      Source: input
    - Input: "Ref"
      Help: "Reference allele recorded in input VCF"
      Source: input
    - Input: "Alt"
      Help: "The single ALT allele described by this row"
      Source: derived
    - Input: "Alts"
      Help: "The full ALT string from the input VCF"
      Source: input
    - Input: "Quality"
      Help: "Quality score recorded in VCF"
      Source: input
    - Input: "Filters"
      Help: "Filters recorded in input VCF"
      Source: input
    - Input: "DP"
      Help: "Sum of read depth for this position"
      FieldType: int
      Source: derived
    - Input: "Freq"
      Help: "Frequency of alternative allele in samples"
      FieldType: float
      Source: derived
    - Input: "GT_00"
      Help: "Number of samples with ref/ref genotype"
      FieldType: int
      Source: genotypes
    - Input: "GT_01"
      Help: "Number of samples with ref/alt genotype"
      FieldType: int
      Source: genotypes
    - Input: "GT_11"
      Help: "Number of samples with alt/alt genotype"
      FieldType: int
      Source: genotypes
    - Input: "GT_NA"
      Help: "Number of samples with missing genotypes"
      FieldType: int
      Source: genotypes
    - Input: "GT_other"
      Help: "Number of samples with other genotypes"
      FieldType: int
      Source: genotypes
    - Input: "Info"
      Help: "INFO string from input VCF"
      Source: input
    - Input: "VEP_allele"
      Help: "The pos:ref:alt corresponding to VEP output"
      Source: derived

# Liftover coordinates
Liftover:
  Rank: 100
  Type: Builtin
  Source: liftover
  Fields:
    - Input: "Hg19_chr"
      Help: "Corresponding chromosome/contig in hg19, if any."
    - Input: "Hg19_pos"
      Help: "Corresponding position in hg19, if any."
      FieldType: int
      ThousandsSep: yes

# Individual sample genotypes
SampleGenotypes:
  Rank: 200
  Type: Builtin
  Source: genotypes
  Enabled: false

# Runtime ~= 1.3x
# http://www.ensembl.org/info/docs/tools/vep/script/vep_plugins.html#ancestralallele
AncestralAllele:
  Rank: 300
  Type: Plugin
  Variables:
    Fasta: "{data-plugins}/homo_sapiens_ancestor_GRCh38.fa.gz"
  Parameters:
    - "{Fasta}"
  Files:
    - "{Fasta}"
    - "{Fasta}.fai"
    - "{Fasta}.gzi"
  Fields:
    - Input: "aa"
      Output: Ancestral_allele

# Runtime ~= 1.6x
# Custom made BED containing overlapping/neighboring genes for every part of hg38
neighbours:
  Rank: 400
  Type: BED
  Mode: overlap
  File: "{data-custom}/Homo_sapiens.GRCh38.104.neighbours.bed.gz"
  Fields:
    # Special handling is needed for these values; see postprocess.py
    - Input: "overlapping"
      Output: "Genes_overlapping"
      Help: "Genes overlapping allele"
    - Input: "upstream"
      Output: "Genes_upstream"
      Help: "Neighbouring genes upstream of allele"
    - Input: "downstream"
      Output: "Genes_downstream"
      Help: "Neighbouring genes downstream of allele"

# Additional built-in annotations, some generated by AnnoVEP
Consequences:
  Rank: 500
  Type: Basic
  Enabled: mandatory
  Source: consequence
  Options:
    # https://www.ensembl.org/info/docs/tools/vep/script/vep_options.html#opt_symbol
    - "--symbol"
    # https://www.ensembl.org/info/docs/tools/vep/script/vep_options.html#opt_polyphen
    - "--polyphen"
    - "b"
    # https://www.ensembl.org/info/docs/tools/vep/script/vep_options.html#opt_numbers
    - "--numbers"
  Fields:
    - Input: "gene_id"
      Output: "Func_gene_id"
      Help: "Gene with the most significant consequence"
    - Input: "transcript_id"
      Output: "Func_transcript_id"
      Help: "Transcript with the most significant consequence"
    - Input: "gene_symbol"
      Output: "Func_gene_symbol"
      Help: "Gene symbol (e.g. HGNC)"
    - Input: "gene_symbol_source"
      Output: "Func_gene_symbol_source"
      Help: "Source of gene symbol"
    - Input: ":most_significant_count:"
      Output: "Func_n_most_significant"
      Help: "Number of consequences ranked as most significant in terms of impact"
      FieldType: int
    - Input: ":most_significant:"
      Output: "Func_most_significant"
      Help: "The most significant consequence"
      FieldType: int
    - Input: "exon"
      Output: "Func_most_significant_exon"
      Help: "The exon of the transcript transcript with the most significant consequence"
    - Input: ":least_significant:"
      Output: "Func_least_significant"
      Help: "The last significant consequence for the same gene as the most significant consequence"
      FieldType: int
    - Input: ":cdna_position:"
      Output: "Func_cdna_position"
      Help: "Relative position of base pair in cDNA sequence"
    - Input: ":cds_position:"
      Output: "Func_cds_position"
      Help: "Relative position of base pair in coding sequence"
    - Input: ":protein_position:"
      Output: "Func_protein_position"
      Help: "Relative position of amino acid in protein"
    - Input: "amino_acids"
      Output: "Func_amino_acids"
      Help: "Reference and variant amino acids"
    - Input: "codons"
      Output: "Func_codons"
      Help: "Reference and variant codon sequence"
    - Input: "impact"
      Output: "Func_impact"
      Help: "Subjective impact classification of consequence type"
    - Input: "strand"
      Output: "Func_strand"
      Help: "Strand of the feature (1/-1)"
      FieldType: int
    - Input: "polyphen_prediction"
      Output: "Func_polyphen"
      Help: "PolyPhen prediction"
    - Input: "polyphen_score"
      Output: "Func_polyphen_score"
      Help: "PolyPhen score"
      FieldType: float

CanonicalConsequences:
  Rank: 600
  Type: Basic
  Enabled: mandatory
  Source: canonical_consequence
  Options:
    # Required to mark the canonical transcript
    - "--canonical"
  Fields:
    - Input: "transcript_id"
      Output: "Func_canonical_transcript_id"
      Help: "Canonical transcript with the most significant consequence"
    - Input: ":most_significant:"
      Output: "Func_most_significant_canonical"
      Help: "The most significant consequence for canonical transcripts only"
      FieldType: int
    - Input: "exon"
      Output: "Func_most_significant_exon_canonical"
      Help: "The exon of the canonical transcript with the most significant consequence"

# https://www.ensembl.org/info/docs/tools/vep/script/vep_options.html#opt_hgvs
HGVS:
  Rank: 700
  Type: Basic
  Source: consequence
  Options:
    - "--hgvs"
    - "--protein"
  Fields:
    - Input: "hgvsc"
      Output: "HGVSc"
      Help: "HGVS ID for coding sequence"
    - Input: "hgvsp"
      Output: "HGVSp"
      Help: "HGVS ID for protein sequence"
    - Input: "hgvs_offset"
      Output: "HGVS_offset"
      Help: "HGVS genomic offset"
  Enabled: false

# Runtime ~= 2.4x
# https://github.com/Ensembl/VEP_plugins/blob/release/104/Conservation.pm
Conservation:
  Rank: 800
  Type: Plugin
  Variables:
    Database: "{data-plugins}/gerp_conservation_scores.homo_sapiens.GRCh38.bw"
  Parameters:
    - "{Database}"
  Files:
    - "{Database}"
  Fields:
    - Input: "conservation"
      Output: "Func_conservation_score"
      Help: "The conservation score for this site"
      FieldType: float
      Digits: 3

# Runtime ~= 1.9x
# https://github.com/konradjk/loftee
LoF:
  Rank: 900
  Type: Plugin
  Variables:
    Fasta: "{data-plugins}/human_ancestor.fa.gz"
    Database: "{data-plugins}/phylocsf_gerp.sql"
  Parameters:
    - "loftee_path:{install-plugins}"
    - "human_ancestor_fa:{Fasta}"
    - "conservation_file:{Database}"
  Files:
    - "{Fasta}"
    - "{Fasta}.fai"
    - "{Fasta}.gzi"
    - "{Database}"
  Fields:
    - Input: "lof"
      Output: "Func_lof"
      Help: "Loss-of-function annotation (HC/LC = High/Low Confidence)"
    - Input: "lof_filter"
      Output: "Func_lof_filter"
      Help: "Reason for LoF not being HC"
      SplitBy: ","
    - Input: "lof_flags"
      Output: "Func_lof_flags"
      Help: "Possible warning flags for LoF"
      SplitBy: ","
    - Input: "lof_info"
      Output: "Func_lof_info"
      Help: "Info used for LoF annotation"
      SplitBy: ","
      Sort: True

# Runtime ~= 1.0x
ExACpLI:
  Rank: 1000
  Type: Plugin
  Variables:
    Values: "{data-plugins}/ExACpLI_values.txt"
  Parameters:
    - "{Values}"
  Files:
    - "{Values}"
  Fields:
    - Input: "exacpli"
      Output: "Func_ExACpLI"
      Help: "Probabililty of a gene being loss-of-function intolerant"
      FieldType: float
      Digits: 2

# Runtime ~= 2.8x
# Custom made dbSNP VCF containing aggregated information
dbSNP:
  Rank: 1100
  Type: VCF
  Mode: exact
  File: "{data-custom}/dbsnp_155_20210513_custom.vcf.gz"
  Fields:
    - Input: "ids"
      Output: "dbSNP_ids"
      Help: "dbSNP ids for alleles alleles matching this pos:ref/alt"
      SplitBy: ","
    - Input: "alts"
      Output: "dbSNP_alts"
      Help: "dbSNP allele strings records matching pos:ref/*"
      SplitBy: ","
    - Input: "functions"
      Output: "dbSNP_functions"
      Help: "GO terms recorded in dbSNP"
      SplitBy: ","

# Runtime ~= 1.0x
# http://m.ensembl.org/info/docs/tools/vep/script/vep_custom.html#custom_example
ClinVar:
  Rank: 1200
  Type: VCF
  Mode: exact
  File: "{data-custom}/clinvar_20210821.vcf.gz"
  Fields:
    - Input: "ALLELEID"
      Output: "ClinVar_ID"
      FieldType: int
      Help: "The ClinVar Allele ID"
    - Input: "CLNDN"
      Output: "ClinVar_disease"
      Help: "ClinVar's preferred disease name"
      SplitBy: "|"
    - Input: "CLNSIG"
      Output: ClinVar_significance
      Help: "Clinical significance for this single variant"

# Runtime ~= 3.7x
# Custom made gnomAD VCFs containing coverage statistics
gnomAD_coverage:
  Rank: 1300
  Type: VCF
  Mode: overlap
  File: "{data-custom}/gnomAD.genomes.r3.0.1.coverage.vcf.gz"
  FieldType: float
  Fields:
    - Input: "mean"
      Output: "gnomAD_mean"
      Help: "gnomAD genomes mean coverage for this site"
      Digits: 2
    - Input: "median"
      Output: "gnomAD_median"
      FieldType: int
      Help: "gnomAD genomes median coverage for this site"
    - Input: "over_15"
      Output: "gnomAD_over_15"
      Help: "gnomAD genomes fraction with coverage over 15x"
      Digits: 4
    - Input: "over_50"
      Output: "gnomAD_over_50"
      Help: "gnomAD genomes fraction with coverage over 50x"
      Digits: 4

# Runtime ~= 4.0x
# Custom made gnomAD VCF containing allele frequencies
gnomAD_sites:
  Rank: 1400
  Type: VCF
  Mode: exact
  File: "{data-custom}/gnomAD.genomes.r3.0.0.sites.vcf.gz"
  FieldType: float
  Digits: 6
  Fields:
    - Input: "FILTER"
      Output: "gnomAD_filter"
      FieldType: str
      Help: "gnomAD genomes FILTER"
      SplitBy: ","
    - Input: ":min:"
      Output: "gnomAD_min"
      Help: "Minimum allele frequency in gnomAD genomes"
      DerivedFrom: "gnomAD_*_AF"
    - Input: ":max:"
      Output: "gnomAD_max"
      Help: "Maximum allele frequency in gnomAD genomes"
      DerivedFrom: "gnomAD_*_AF"
    - Input: "AF"
      Output: "gnomAD_ALL_AF"
      Help: "Frequency of existing variant in all gnomAD genomes"
    - Input: "AF_afr"
      Output: "gnomAD_AFR_AF"
      Help: "Frequency of existing variant in gnomAD genomes African/American population"
    - Input: "AF_ami"
      Output: "gnomAD_AMI_AF"
      Help: "Frequency of existing variant in gnomAD genomes Amish population"
    - Input: "AF_amr"
      Output: "gnomAD_AMR_AF"
      Help: "Frequency of existing variant in gnomAD genomes American population"
    - Input: "AF_asj"
      Output: "gnomAD_ASJ_AF"
      Help: "Frequency of existing variant in gnomAD genomes Ashkenazi Jewish population"
    - Input: "AF_eas"
      Output: "gnomAD_EAS_AF"
      Help: "Frequency of existing variant in gnomAD genomes East Asian population"
    - Input: "AF_fin"
      Output: "gnomAD_FIN_AF"
      Help: "Frequency of existing variant in gnomAD genomes Finnish population"
    - Input: "AF_nfe"
      Output: "gnomAD_NFE_AF"
      Help: "Frequency of existing variant in gnomAD genomes Non-Finnish European population"
    - Input: "AF_oth"
      Output: "gnomAD_OTH_AF"
      Help: "Frequency of existing variant in gnomAD genomes other combined population"
    - Input: "AF_sas"
      Output: "gnomAD_SAS_AF"
      Help: "Frequency of existing variant in gnomAD genomes South Asian population"

# Runtime ~= 1.4x
1KGenomes:
  Rank: 1500
  Type: VCF
  Mode: exact
  File: "{data-custom}/1000Genomes_20200805.vcf.gz"
  FieldType: float
  Digits: 6
  Fields:
    - Input: "AF_AFR_unrel"
      Output: "1KG_AFR_AF"
      Help: "Frequency of existing variant in 1000 Genomes combined African population"
    - Input: "AF_AMR_unrel"
      Output: "1KG_AMR_AF"
      Help: "Frequency of existing variant in 1000 Genomes combined American population"
    - Input: "AF_EAS_unrel"
      Output: "1KG_EAS_AF"
      Help: "Frequency of existing variant in 1000 Genomes combined East Asian population"
    - Input: "AF_EUR_unrel"
      Output: "1KG_EUR_AF"
      Help: "Frequency of existing variant in 1000 Genomes combined European population"
    - Input: "AF_SAS_unrel"
      Output: "1KG_SAS_AF"
      Help: "Frequency of existing variant in 1000 Genomes combined South Asian population"
